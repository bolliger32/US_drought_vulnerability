install.packages("swirl")
library("swirl")
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
file.info(mytest.R)
getwd()
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
create.file("mytest3.R")
file.create("mytest3.R")
file.path("mytest3.R")
nxt()
file.path("mytest3.R","folder1")
file.path("folder1","folder2")
dir.create?
?dir.create
?dir.create
dir.create("testdir2",recursive=true, file.path("testdir3"))
nxt()
dir.create()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls()
rm(liss=ls())
rm(list=ls())
swirl()
1
2
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
UNLINK('testdir2',recursie=TRUE)
unlink('testdir2',recursive=TRUE)
setwd('old.dir')
setwd('/users/Dan')
setwd(old.dir)
unlink('testdir')
unlink('testdir',recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=.5)
my_seq=seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(1,length(my_seq))
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect=c(.5,55,-10,6)
num_vect<-c(.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<=c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Dan")
my_name
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rm(list=ls())
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[~is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
args(lm)
f <- function (a,b){
a^2
}
f(2)
f(2,3)
paste(a,b,c)
paste("a","dog", "ran")
cat("a","dog","ran")
cat("a","dog","ran", append=T)
cat("a","dog","ran", append=F)
cat("a","dog","ran", fill=T)
cat("a","dog","ran", labels=T)
cat("a","dog","ran", labels=TRUE)
paste("a","dog", "ran", collapse=T)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls()
rm(list=ls())
swirl()
is.true(True)
TRUE==TRUE
(FALSE==TRUE) == FALSE
6==7
6<7
10<=10
5 != 7
5!=7
!5==7
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
install.packages("knitr")
\author{Dan Rejto}
\date{\today}
plot(x,y)
<<"TestAnalysisCode">>=
x <- 1:10
y <- x*2+5
x==y
iris
volcano
summary(iris)
regress?
q
? regress
??regress
forestfires <- read.csv("/var/folders/fm/gpc5bqbx4q9dj77zp9vmq67m0000gn/T//RtmpTx52Dk/data24dd7c287d0b")
View(forestfires)
help plot
plot?
?plot
?plot
fires <- read.csv('/GitHub/forest_fires/data/forestfires.csv')
fires <- read.csv('~/GitHub/forest_fires/data/forestfires.csv')
plot(fires["temp"],fires["wind"])
plot(fires$temp,fires$wind")
plot(fires$temp,fires$wind)
dev.off()
# open graphic device
png(file = '../../images/scatterplot.png')
getwd()
fires <-read.csv('~/GitHub/forest_fires/data/forestfires.csv')
plot(fires$temp,fires$wind)
plot(fires$temp,fires$wind)
plot(fires$temp,fires$wind)
dev.off()
plot(fires$temp,fires$wind)
?count
?length
length(fires)
size(fires)
nrows(fires)
ncols(fires)
nrow(fires)
ncol(fires)
?library
summary(fires$wind)
summary(fires$wind,fires$temp)
?summary
summary([fires$wind,fires$temp])
?xtable
?summmary
?summary
summary(fires[,c("wind","temp")])
<<summary_stats, echo = FALSE, results='asis'>>=
library(xtable)
stats <- summary(fires[,c("wind","temp")])
xtable(stats)
install.packages("xtable")
% with summary statistics of temperature and wind
<<summary_stats, echo = FALSE, results='asis'>>=
library(xtable)
stats <- summary(fires[,c("wind","temp")])
xtable(stats)
\section{Plots}
Plot of Rain vs. Temp for Forest Fires (n= \Sexpr{nrow(fires)})
\begin{figure}[h!]
\includegraphics[width=1\textwidth]{../../images/scatterplot.png}
\end{figure}
\section{Plots}
Plot of Rain vs. Temp for Forest Fires n = \Sexpr{nrow(fires)}
\begin{figure}[h!]
\includegraphics[width=1\textwidth]{../../images/scatterplot.png}
\end{figure}
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
state = read.csv("state_lookup_table.csv",1)
wd="~/Desktop/drought_project/data" ## replace with your own path name
setwd(wd)
require(maptools)
install.packages("maptools")
library("maptools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rgeos")
detach("package:maptools", unload=TRUE)
library("maptools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
wd="~/Desktop/drought_project/data"
setwd(wd)
state = read.csv("state_lookup_table.csv",1)
?factor
CoC_GIS_State_Shapefile_AL_2014 <- read.table("/var/folders/fm/gpc5bqbx4q9dj77zp9vmq67m0000gn/T//RtmpNMiIJg/data11732b19bdc", header=TRUE, quote="\"")
View(CoC_GIS_State_Shapefile_AL_2014)
?download
?geturl
?curl
?wget
?download.file
download.file(https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip, "~/Desktop/drought_project/data/homeless")
download.file("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip", "~/Desktop/drought_project/data/homeless")
install.packages("RCurl")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:RCurl", unload=TRUE)
install.packages("downloader")
library("downloader", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
download.file("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip", "~/Desktop/drought_project/data/homeless")
download("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip", mode="wb")
download("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip",'~/Desktop/drought_project/data/homeless', mode="wb")
download("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip",'~/Desktop/drought_project/data/homeless.zip', mode="wb")
download("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip",'~/Desktop/drought_project/data/homeless.zip', mode="wb")
unzip ("AL_2014.zip", exdir = "~/homeless")
unzip ("AL_2014.zip", exdir = "../")
unzip ("AL_2014.zip", exdir = "./")
unzip ("CoC_GIS_State_Shapefile_AL_2014.zip", exdir = "../")
unzip ("CoC_GIS_State_Shapefile_AL_2014.zip", exdir = "./")
unzip ("homeless.zip", exdir = "./")
setwd("~/Desktop/drought_project/data/homeless")
download("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_AL_2014.zip",'AL.zip', mode="wb")
unzip ("AL.zip", exdir = "./")
length(state)
size(state)
len(state)
state$abbreviation
length(state$abbreviation)
ST = 5
state$abbreviation[ST]
test = concatenate(state$abbreviation[ST],state$abbreviation[ST])
??concatenate
test = cat(state$abbreviation[ST],state$abbreviation[ST])
?read.csv
state = read.csv("state_lookup_table.csv",1,as.is)
state = read.table("state_lookup_table.csv",1,as.is)
state = read.table("state_lookup_table.csv",1,as.is=3)
state = read.table("state_lookup_table.csv",1,as.is=2)
state = read.table("state_lookup_table.csv",1,as.is)
test = read.csv("state_lookup_table.csv",1,stringsAsFactors=FALSE)
View(test)
test$abbreviation
ST = cat(state$abbreviation[5],'.zip')
state = read.csv("state_lookup_table.csv",1,stringsAsFactors=FALSE)
ST = cat(state$abbreviation[5],'.zip')
?cat
ST = cat(state$abbreviation[5],'.zip',sep="")
is.string(ST)
?is.string
byCoC=read.xlsx("2007-2015-PIT-Counts-by-CoC.xlsx",1)
byCoC=read.xlsx("2007-2015-PIT-Counts-by-CoC.xlsx",1,stringsAsFactors=FALSE)
names(byCoC)
byCoC$CoC.Name[5]
length("~/Alabama")
size("~/Alabama")
list.files(Alabama)
list.files("Alabama")
?unzip
ST = AK
ST = "AK"
ST = "AK_2014.zip"
url = cat("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
url = cat("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
test = cat("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
test = cat(1,2,3)
?string
?cat
?rbing
?rbind
?paste
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
folder = paste(state$abbreviation[row],'/')
row = 2
unzip (ST, exdir = state$abbreviation[row])
list.files("Alabama")
length(list.files("Alabama"))
length(list.files("Alabama"))-1
for (row in length(state$abbreviation)) {
ST = cat(state$abbreviation[row],'_2014','.zip',sep="")
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
}
ST = paste(state$abbreviation[row],'_2014','.zip',sep="")
length(state$abbreviation)
for (row in length(state$abbreviation)) {
ST = paste(state$abbreviation[row],'_2014','.zip',sep="")
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
}
row = 0
for (row in length(state$abbreviation)) {
ST = paste(state$abbreviation[row],'_2014','.zip',sep="")
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
}
state = read.csv("state_lookup_table.csv",1,stringsAsFactors=FALSE)
for (row in length(state$abbreviation)) {
ST = paste(state$abbreviation[row],'_2014','.zip',sep="")
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
}
for (row in 1:length(state$abbreviation)) {
ST = paste(state$abbreviation[row],'_2014','.zip',sep="")
url = paste("https://www.hudexchange.info/resource/reportmanagement/published/CoC_GIS_State_Shapefile_",ST,sep="")
download(url,ST, mode="wb")
unzip (ST, exdir = state$abbreviation[row])
}
