# Title: Calculate drought indicator from summarized weekly DM
# Description: This script calculates the drought indicators, which are a 1-year indicator, a 3-year indicator, and a 5-year indicator, from summarized weekly DM.<br \>
    # The drought indicators are the number of weeks during the past 1/3/5 years each county in each year gets impacted under drought level D2, D3, and D4, weighted by the area of the impact. <br \>
# Inputs: 
    # Six summary files for different drought impact. <br \>
        # - No drought: "..\data\drought_monitor\weekly_no_drought.csv"
        # - DM_0: "..\data\drought_monitor\weekly_DM_0.csv"
        # - DM_1: "..\data\drought_monitor\weekly_DM_1.csv"
        # - DM_2: "..\data\drought_monitor\weekly_DM_2.csv"
        # - DM_3: "..\data\drought_monitor\weekly_DM_3.csv"
        # - DM_4: "..\data\drought_monitor\weekly_DM_4.csv"
        # - County_area: "..\data\drought_monitor\county_area.csv"
# Outputs: Three csv files for the 1-year, 3-year, 5-year indicator.
# Author: Yang Ju (yangju90@berkeley.edu)
# Date: 04/21/2016
# Modified:
    # 04/26/2016 (Ian Bolliger, bolliger@berkeley.edu): converted from notebook to .py script

import pandas as pd
import argparse
from os.path import join


def DMcalculator(DM_list,year_of_interest,look_back):
    i = 1
    DM_sum = pd.DataFrame(0,DM_list[0]['GISJOIN'],[])
    for item in DM_list:
        i=i+1
        temp = pd.DataFrame()
        item.index = item['GISJOIN']
        for year in range(year_of_interest,year_of_interest-look_back,-1):
            matching = [s for s in list(item.columns.values) if str(year) in s]
            temp[str(year)] = item[matching].sum(1)
        DM_sum['leve_'+str(i)]= temp.sum(1)
    return DM_sum
        
        
def main(dm_dir,county_area_path,look_back):
    
    # DM_none and DM_1 commented out b/c not currently used
#    DM_none = pd.read_csv(join(dm_dir,'weekly_no_drought.csv'))
    DM_0 = pd.read_csv(join(dm_dir,'weekly_DM_0.csv'))
#    DM_1 = pd.read_csv(join(dm_dir,'weekly_DM_1.csv'))
    DM_2 = pd.read_csv(join(dm_dir,'weekly_DM_2.csv'))
    DM_3 = pd.read_csv(join(dm_dir,'weekly_DM_3.csv'))
    DM_4 = pd.read_csv(join(dm_dir,'weekly_DM_4.csv'))
    county_area = pd.read_csv(county_area_path)


    ## Define the inputs here
    # choose a DM level range you want from [DM_none,DM_0,DM_1,DM_2,DM_3,DM_4]
    DM_list  = [DM_2,DM_3,DM_4]


    ## Develop indicators for 1-, 3-, and 5-year cumulative drought
    start_year = 1999 + look_back
    end_year = 2016

    # final calculation
    # needs to nomalize by area and time span (for 2016)
    DM_final_sum = pd.DataFrame(0,DM_0['GISJOIN'],[])
    for year in range(end_year,start_year-1,-1):
        DM_final_sum[year] = DMcalculator(DM_list,year,look_back).sum(1)
    DM_final_sum ['GISJOIN'] =DM_final_sum.index
    DM_final_sum = DM_final_sum.merge(county_area,on='GISJOIN')
    for year in range(end_year,start_year-1,-1):
        DM_final_sum[year] = DM_final_sum[year]/DM_final_sum['AREA']
    DM_final_sum_clean = DM_final_sum[list(DM_final_sum.columns.values[:-3])]
    # DM_final_sum_clean.to_csv(r"..\data\drought_monitor\drought_indicator_%syear_matrics.csv"%(look_back))
    DM_final_sum_clean.head()


    DM_final_sum_clean.index = DM_final_sum_clean['GISJOIN']
    DM_final_clean = DM_final_sum_clean.drop(['GISJOIN'],axis=1)
    reformat = pd.DataFrame()
    reformat['drought_%syear'%(look_back)] = DM_final_clean.stack()
    reformat = reformat.reindex(reformat.index.rename(['GISJOIN','year']))
    reformat.to_csv(join(dm_dir,"drought_indicator_{}year_matrics_reformat.csv".format(look_back)))


if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Get drought indicator metrics.')
    parser.add_argument('dm_dir',default=join("..","..","data","drought_monitor"))
    parser.add_argument('look_back',type=int)
    parser.add_argument('--county_area',default=join("..","..","data","drought_monitor","county_area.csv"))
    args=parser.parse_args()
    main(args.dm_dir,args.county_area,args.look_back)
    