* ----------------------------------------------
* Import NASS Quickstat Crop Yield Data
* For DS421 project
* 4/11/16
* Andy Hultgren
* hultgren@berkeley.edu
* ----------------------------------------------

clear all
set more off

// Set up the directory references, DO NOT cd in the git repo, just on my local machine.
// IB 4/25/16: Changed to relative paths, given the directory structure of our project

//cd "C:/Users/Andy/Documents/ARE/Classes/z - DS421 - Stats 261/gitrepo/US_drought_vulnerability"
global dataDir "../../data/yield/yield_raw"
global compiledDir "../../data/yield"


//--------- Main Program ------------

capture program drop main_program
program define main_program

local crops "corn soybeans wheat" //make sure to list corn first

foreach crop in `crops' {
	local crop "`crop'_"
	local files : dir "$dataDir" files "`crop'*.csv"
	disp(`files')
	local file_count = 1
	foreach file in `files' {
		disp("$dataDir/`file'")
		preserve
		import_data `crop' "$dataDir/`file'" `file_count'
		restore
		if (`file_count' == 1 & "`crop'" == "corn_") {
			// This is the first file -- append don't merge
			append using "$dataDir/temp/`crop'`file_count'.dta"
			sort stateansi countyansi year
		}
		else {
			merge stateansi countyansi year using "$dataDir/temp/`crop'`file_count'.dta"
			tab _merge
			drop _merge
			sort stateansi countyansi year
		}
		local file_count = `file_count' + 1
	}
}
// final clean and save
drop program weekending agdistrict agdistrictcode zipcode region watershed_code watershed domaincategory cv

// Consistent naming convention for FIPS codes.
rename stateansi STATEFP10
rename countyansi COUNTYFP10

export delimited "$compiledDir/NASS_all.csv", replace

end //main_program	





//--------- Import the NASS Quickstats Data ------------
* This function will reshape the long data into wide format, and generate 
* unique variable names based on the data labels.
* The code for saving of data labels was modified from 
* http://www.stata.com/support/faqs/data-management/apply-labels-after-reshape/
* 
* Requires the arguments:
* 	crop: the crop associated wtih the filename argument 
* 	filename: the full path to the file to import (a .csv file)
*	file_count: the current count of files of type 'crop' that have been imported

capture program drop import_data
program define import_data

clear
local crop `1'
local filename `2'
local file_count `3'

import delimited "`filename'"

capture drop commodity // messes up uniqueness of rows in merged dataset
drop if countyansi == . // get rid of regional summaries
// Select the yield data
if "`crop'" == "corn_" {
	drop if dataitem != "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE"
}
else if "`crop'" == "soybeans_" {
	drop if dataitem != "SOYBEANS - YIELD, MEASURED IN BU / ACRE"
}
else if "`crop'" == "wheat_" {
	drop if dataitem != "WHEAT - YIELD, MEASURED IN BU / ACRE"
}
else {
	display("Not ready to handle that crop!")
	break
}


destring value, ignore(",") replace

drop dataitem

rename value `crop'yield
  
 // sort for merging afterwards
 sort stateansi countyansi year
 
 save "$dataDir/temp/`crop'`file_count'.dta", replace
 
 end //import_data

 
 
/*=====================================================*/
/* ================ RUN MAIN PROGRAM ==================*/
/*=====================================================*/

main_program

disp("--------- DONE ---------")
