
# Title: Summarize Decomposed Weekly DM csv
# Description:
    # 1. This code summarize the weekly csv from the script code/clean/Decompose_drought_monitor_to_county.py.
    # 2. For each DM level, it generates a csv that shows the area in each county that is under the DM level in each week. 
    # 3. **Do not run this code as the output from step 1 is not pushed to the repository due to file size**
# Inputs: 
    # Weekly csv files from the script: code/clean/Decompose_drought_monitor_to_county.py. The csv files are not pushed to the repository due to their file size.
# Outputs: 
    # 6 csv files that represents each DM level and no drought. Each file has the area under certain level of drought in each county each week.
# Author: Yang Ju (yangju90@berkeley.edu)
# Date: 04/21/2016
# Modified:
    # 04/26/2016 (Ian Bolliger, bolliger@berkeley.edu): converted from notebook to .py script

import pandas as pd
import os
import argparse
from os.path import join

def main(path,outdir):
    # read the files
    dirs = os.listdir(path)
    # use the first week to setup a template for the summary table
    # create a pivot table for the counties to describe how much each county is affected by a certain DM level
    summary= pd.read_excel(join(path,dirs[0])).pivot_table(index='GISJOIN', columns='DM_mod', values='POLY_AREA').fillna(0)
    summary[4]=0
    summary[5]=0
    summary.head()


    DM_0 = pd.DataFrame(index = summary.index)
    DM_1 = pd.DataFrame(index = summary.index)
    DM_2 = pd.DataFrame(index = summary.index)
    DM_3 = pd.DataFrame(index = summary.index)
    DM_4 = pd.DataFrame(index = summary.index)
    DM_none = pd.DataFrame(index = summary.index)


    # read decomposed DM from each week. start from week 2 (dirs[1:].
    i=0;
    for file in dirs[1:]:
        if file.endswith('.xls'):
            temp = pd.read_excel(join(path,file)).pivot_table(index='GISJOIN', columns='DM_mod', values='POLY_AREA').fillna(0)
            i=i+1
            # print('working on week:',i)

            # add missing DM levels
            for j in range(0,6):
                if j not in temp.columns:
                    temp[str(j)] = 0

            # add the DM data to the summary table
            summary = temp+summary

            # save the area by each DM level in each week
            DM_none[file[-12:-4]] = temp[0]
            DM_0[file[-12:-4]] = temp[1]
            DM_1[file[-12:-4]] = temp[2]
            DM_2[file[-12:-4]] = temp[3]
            DM_3[file[-12:-4]] = temp[4]
            DM_4[file[-12:-4]] = temp[5]

    # rename the columns to original DM level
    summary = summary.rename(columns ={0:'no drought',1:'DM0',2:'DM1',3:'DM2',4:'DM3',5:'DM4'})

    # save the final results
    summary.to_csv(join(outdir,"summary.csv"))
    DM_lvls = {'no_drought':DM_none,
              'DM_0':DM_0,
              'DM_1':DM_1,
              'DM_2':DM_2,
              'DM_3':DM_3,
              'DM_4':DM_4,
              }
    for i in DM_lvls:
        DM_lvls[i].to_csv(join(outdir,"weekly_{}.csv".format(i)))
        

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Summarize decomposed weekly drought monitor data.')
    parser.add_argument('outdir',default=join("..","..","data","drought_monitor"))
    parser.add_argument('indir',default=join("..","..","data","drought_monitor","processed","csv"))
    args=parser.parse_args()
    main(args.indir,args.outdir)
